Transitive overview.

Transitive has two key features:
  Broadcasting data
  Render Updaters

Additionally, Transitive provides:
  Configuration
  Asset packaging

Broadcasting data is the ability for your persistence layer to emit events when your data changes.  Learn more about broadcasting data.

Render Updaters update the DOM when there is an update to the data. Read the intro to render updaters. 

Calling a "publish" function when your data changes is easy.  Updating the DOM when you know the data has changed is a lot harder.  Transitive provides a lot of support for updaters.

Reasonable Defaults

Transitive provides example broadcasting datastores (backed by redis) and example render updaters (replace, prepend, addRemove), but you should consider these examples and feel free to implement your own once you have a basic understanding of the system.

Limited Scope

Transitive *does not* provide an ORM, permissions framework, django_admin-style interface or complex controller/router.  These things are welcome as plugins, and I am more than happy to provide support for anyone interested in building such things.

Customizeability

The events your data broadcasts and the kinds of updates you'd like to make are both very application specific, so every effort has been made to streamline the process of creating custom broadcasting data stores and render updaters.  Transitive provides the structure and framework so you can focus on your application-specifc code

I'd like to support an explicit plugin system soon.  If you have ideas about this, or would like to pitch in, please email me.









Transitive `initialize(scope, options)` does four things:
  0. Global Mixins
  1. Views & Assets
  2. Initialize Server 
  3. Setup the router

0. Global Mixins

Nobody likes pollution, but we all like convienence.

Here are the items mixed in to the scope passed to initialize:

  ...


1. Initialize views.

Sharing views between the server and the client is one of the key strengths of Transitive.  Out of the box, Transitive supports Haml-js and underscore templates.

Transitive views are composed of:
  Templates - Haml-js, underscore (ejs) or ( mustache ?) by default
  RenderContext & ViewBindings - 
  LiveRenders - {render, updater, [templates]} objects that provide the context and and state modifaction for "live" templates.



Transitive Views

  RenderContext - the scope that all compiled templates and render functions are attached to (`this` in a template refers to a RenderContext.)
  ViewBindings - { element, template, object, updater} objects that are automatically added to the RenderContext when renderLive is called
